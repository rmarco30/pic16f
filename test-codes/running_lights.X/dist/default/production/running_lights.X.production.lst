

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Mar 01 11:28:04 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	intentry,global,class=CODE,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.31
    14                           ; Generated 13/10/2020 GMT
    15                           ; 
    16                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  000B                     _INTCONbits	set	11
   169  0008                     _PORTD	set	8
   170  000B                     _INTCON	set	11
   171  0059                     _INTF	set	89
   172  0086                     _TRISB	set	134
   173  0088                     _TRISD	set	136
   174  0081                     _OPTION_REG	set	129
   175                           
   176                           	psect	cinit
   177  000F                     start_initialization:	
   178                           ; #config settings
   179                           
   180  000F                     __initialization:
   181                           
   182                           ; Clear objects allocated to COMMON
   183  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   184  0010                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  0010                     __end_of__initialization:
   188  0010  0183               	clrf	3
   189  0011  120A  118A  2814   	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bssCOMMON
   192  0077                     __pbssCOMMON:
   193  0077                     _direction:
   194  0077                     	ds	1
   195                           
   196                           	psect	cstackCOMMON
   197  0070                     __pcstackCOMMON:
   198  0070                     ?_main:
   199  0070                     ?_interrupt_manager:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ??_interrupt_manager:	
   203                           ; 1 bytes @ 0x0
   204                           
   205                           
   206                           ; 1 bytes @ 0x0
   207  0070                     	ds	3
   208  0073                     ??_main:
   209                           
   210                           ; 1 bytes @ 0x3
   211  0073                     	ds	3
   212  0076                     main@bit_position:
   213                           
   214                           ; 1 bytes @ 0x6
   215  0076                     	ds	1
   216                           
   217                           	psect	maintext
   218  0014                     __pmaintext:	
   219 ;;
   220 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   221 ;;
   222 ;; *************** function _main *****************
   223 ;; Defined at:
   224 ;;		line 14 in file "main.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;		None
   227 ;; Auto vars:     Size  Location     Type
   228 ;;  bit_position    1    6[COMMON] unsigned char 
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   233 ;; Tracked objects:
   234 ;;		On entry : B00/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   238 ;;      Params:         0       0       0       0       0
   239 ;;      Locals:         1       0       0       0       0
   240 ;;      Temps:          3       0       0       0       0
   241 ;;      Totals:         4       0       0       0       0
   242 ;;Total ram usage:        4 bytes
   243 ;; Hardware stack levels required when called:    1
   244 ;; This function calls:
   245 ;;		Nothing
   246 ;; This function is called by:
   247 ;;		Startup code after reset
   248 ;; This function uses a non-reentrant model
   249 ;;
   250                           
   251                           
   252                           ;psect for function _main
   253  0014                     _main:
   254  0014                     l631:	
   255                           ;incstack = 0
   256                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   257                           
   258                           
   259                           ;main.c: 16:     OPTION_REG = 0x3f;
   260  0014  303F               	movlw	63
   261  0015  1683               	bsf	3,5	;RP0=1, select bank1
   262  0016  1303               	bcf	3,6	;RP1=0, select bank1
   263  0017  0081               	movwf	1	;volatile
   264                           
   265                           ;main.c: 17:     INTCON = 0x90;
   266  0018  3090               	movlw	144
   267  0019  008B               	movwf	11	;volatile
   268  001A                     l633:
   269                           
   270                           ;main.c: 19:     TRISD = 0x00;
   271  001A  0188               	clrf	8	;volatile
   272  001B                     l635:
   273                           
   274                           ;main.c: 20:     TRISB |= 0x01;
   275  001B  1406               	bsf	6,0	;volatile
   276  001C                     l637:
   277                           
   278                           ;main.c: 22:     unsigned char bit_position = 1;
   279  001C  01F6               	clrf	main@bit_position
   280  001D  0AF6               	incf	main@bit_position,f
   281  001E  285A               	goto	l657
   282  001F                     l639:
   283                           
   284                           ;main.c: 30:                 _delay((unsigned long)((100)*(20000000/4000.0)));
   285  001F  3003               	movlw	3
   286  0020  00F5               	movwf	??_main+2
   287  0021  308A               	movlw	138
   288  0022  00F4               	movwf	??_main+1
   289  0023  3055               	movlw	85
   290  0024  00F3               	movwf	??_main
   291  0025                     u67:
   292  0025  0BF3               	decfsz	??_main,f
   293  0026  2825               	goto	u67
   294  0027  0BF4               	decfsz	??_main+1,f
   295  0028  2825               	goto	u67
   296  0029  0BF5               	decfsz	??_main+2,f
   297  002A  2825               	goto	u67
   298  002B  282C               	nop2
   299  002C                     l641:
   300                           
   301                           ;main.c: 31:                 bit_position = bit_position << 1U;
   302  002C  0876               	movf	main@bit_position,w
   303  002D  00F3               	movwf	??_main
   304  002E  0773               	addwf	??_main,w
   305  002F  00F4               	movwf	??_main+1
   306  0030  0874               	movf	??_main+1,w
   307  0031  00F6               	movwf	main@bit_position
   308  0032                     l643:
   309                           
   310                           ;main.c: 32:                 PORTD = bit_position;
   311  0032  0876               	movf	main@bit_position,w
   312  0033  1283               	bcf	3,5	;RP0=0, select bank0
   313  0034  1303               	bcf	3,6	;RP1=0, select bank0
   314  0035  0088               	movwf	8	;volatile
   315                           
   316                           ;main.c: 34:                 if(PORTD == 0x00) {
   317  0036  0808               	movf	8,w	;volatile
   318  0037  1D03               	btfss	3,2
   319  0038  283A               	goto	u11
   320  0039  283B               	goto	u10
   321  003A                     u11:
   322  003A  285A               	goto	l24
   323  003B                     u10:
   324  003B                     l645:
   325                           
   326                           ;main.c: 35:                     PORTD = 0x01;
   327  003B  3001               	movlw	1
   328  003C  0088               	movwf	8	;volatile
   329  003D  285A               	goto	l657
   330  003E                     l647:
   331                           
   332                           ;main.c: 40:                 _delay((unsigned long)((100)*(20000000/4000.0)));
   333  003E  3003               	movlw	3
   334  003F  00F5               	movwf	??_main+2
   335  0040  308A               	movlw	138
   336  0041  00F4               	movwf	??_main+1
   337  0042  3055               	movlw	85
   338  0043  00F3               	movwf	??_main
   339  0044                     u77:
   340  0044  0BF3               	decfsz	??_main,f
   341  0045  2844               	goto	u77
   342  0046  0BF4               	decfsz	??_main+1,f
   343  0047  2844               	goto	u77
   344  0048  0BF5               	decfsz	??_main+2,f
   345  0049  2844               	goto	u77
   346  004A  284B               	nop2
   347  004B                     l649:
   348                           
   349                           ;main.c: 41:                 PORTD = (PORTD >> 1u);
   350  004B  1283               	bcf	3,5	;RP0=0, select bank0
   351  004C  1303               	bcf	3,6	;RP1=0, select bank0
   352  004D  0808               	movf	8,w	;volatile
   353  004E  00F3               	movwf	??_main
   354  004F  1003               	clrc
   355  0050  0C73               	rrf	??_main,w
   356  0051  0088               	movwf	8	;volatile
   357  0052                     l651:
   358                           
   359                           ;main.c: 43:                 if(PORTD == 0x00) {
   360  0052  0808               	movf	8,w	;volatile
   361  0053  1D03               	btfss	3,2
   362  0054  2856               	goto	u21
   363  0055  2857               	goto	u20
   364  0056                     u21:
   365  0056  285A               	goto	l24
   366  0057                     u20:
   367  0057                     l653:
   368                           
   369                           ;main.c: 44:                     PORTD = 0x80;
   370  0057  3080               	movlw	128
   371  0058  0088               	movwf	8	;volatile
   372  0059  285A               	goto	l657
   373  005A                     l24:
   374  005A                     l657:
   375  005A  0877               	movf	_direction,w	;volatile
   376  005B  00F3               	movwf	??_main
   377  005C  01F4               	clrf	??_main+1
   378                           
   379                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   380                           ; Switch size 1, requested type "simple"
   381                           ; Number of cases is 1, Range of values is 0 to 0
   382                           ; switch strategies available:
   383                           ; Name         Instructions Cycles
   384                           ; simple_byte            4     3 (average)
   385                           ; direct_byte           11     8 (fixed)
   386                           ; jumptable            260     6 (fixed)
   387                           ;	Chosen strategy is simple_byte
   388  005D  0874               	movf	??_main+1,w
   389  005E  3A00               	xorlw	0	; case 0
   390  005F  1903               	skipnz
   391  0060  2862               	goto	l703
   392  0061  285A               	goto	l24
   393  0062                     l703:
   394                           
   395                           ; Switch size 1, requested type "simple"
   396                           ; Number of cases is 2, Range of values is 0 to 1
   397                           ; switch strategies available:
   398                           ; Name         Instructions Cycles
   399                           ; simple_byte            7     4 (average)
   400                           ; direct_byte           14     8 (fixed)
   401                           ; jumptable            260     6 (fixed)
   402                           ;	Chosen strategy is simple_byte
   403  0062  0873               	movf	??_main,w
   404  0063  3A00               	xorlw	0	; case 0
   405  0064  1903               	skipnz
   406  0065  281F               	goto	l639
   407  0066  3A01               	xorlw	1	; case 1
   408  0067  1903               	skipnz
   409  0068  283E               	goto	l647
   410  0069  285A               	goto	l24
   411  006A  120A  118A  280C   	ljmp	start
   412  006D                     __end_of_main:
   413                           
   414                           	psect	text1
   415  006D                     __ptext1:	
   416 ;; *************** function _interrupt_manager *****************
   417 ;; Defined at:
   418 ;;		line 55 in file "main.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;		None
   421 ;; Auto vars:     Size  Location     Type
   422 ;;		None
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, status,2, status,0
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   432 ;;      Params:         0       0       0       0       0
   433 ;;      Locals:         0       0       0       0       0
   434 ;;      Temps:          3       0       0       0       0
   435 ;;      Totals:         3       0       0       0       0
   436 ;;Total ram usage:        3 bytes
   437 ;; Hardware stack levels used:    1
   438 ;; This function calls:
   439 ;;		Nothing
   440 ;; This function is called by:
   441 ;;		Interrupt level 1
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           
   446                           ;psect for function _interrupt_manager
   447  006D                     _interrupt_manager:
   448  006D                     i1l665:
   449                           
   450                           ;main.c: 56:     INTCONbits.GIE = 0;
   451  006D  138B               	bcf	11,7	;volatile
   452                           
   453                           ;main.c: 58:     if(INTCONbits.INTF) {
   454  006E  1C8B               	btfss	11,1	;volatile
   455  006F  2871               	goto	u3_21
   456  0070  2872               	goto	u3_20
   457  0071                     u3_21:
   458  0071  287D               	goto	i1l671
   459  0072                     u3_20:
   460  0072                     i1l667:
   461                           
   462                           ;main.c: 59:         direction = !direction;
   463  0072  0877               	movf	_direction,w	;volatile
   464  0073  1903               	btfsc	3,2
   465  0074  2876               	goto	u4_21
   466  0075  2878               	goto	u4_20
   467  0076                     u4_21:
   468  0076  3001               	movlw	1
   469  0077  2879               	goto	u5_20
   470  0078                     u4_20:
   471  0078  3000               	movlw	0
   472  0079                     u5_20:
   473  0079  00F0               	movwf	??_interrupt_manager
   474  007A  0870               	movf	??_interrupt_manager,w
   475  007B  00F7               	movwf	_direction	;volatile
   476  007C                     i1l669:
   477                           
   478                           ;main.c: 60:         INTF = 0;
   479  007C  108B               	bcf	11,1	;volatile
   480  007D                     i1l671:
   481                           
   482                           ;main.c: 63:     INTCONbits.GIE = 1;
   483  007D  178B               	bsf	11,7	;volatile
   484  007E                     i1l39:
   485  007E  0872               	movf	??_interrupt_manager+2,w
   486  007F  008A               	movwf	10
   487  0080  0E71               	swapf	??_interrupt_manager+1,w
   488  0081  0083               	movwf	3
   489  0082  0EFE               	swapf	btemp,f
   490  0083  0E7E               	swapf	btemp,w
   491  0084  0009               	retfie
   492  0085                     __end_of_interrupt_manager:
   493  007E                     btemp	set	126	;btemp
   494  007E                     wtemp0	set	126
   495                           
   496                           	psect	intentry
   497  0004                     __pintentry:	
   498                           ;incstack = 0
   499                           ; Regs used in _interrupt_manager: [wreg+status,2+status,0]
   500                           
   501  0004                     interrupt_function:
   502  007E                     saved_w	set	btemp
   503  0004  00FE               	movwf	btemp
   504  0005  0E03               	swapf	3,w
   505  0006  00F1               	movwf	??_interrupt_manager+1
   506  0007  080A               	movf	10,w
   507  0008  00F2               	movwf	??_interrupt_manager+2
   508  0009  120A  118A  286D   	ljmp	_interrupt_manager
   509                           
   510                           	psect	config
   511                           
   512                           ;Config register CONFIG @ 0x2007
   513                           ;	Oscillator Selection bits
   514                           ;	FOSC = HS, HS oscillator
   515                           ;	Watchdog Timer Enable bit
   516                           ;	WDTE = OFF, WDT disabled
   517                           ;	Power-up Timer Enable bit
   518                           ;	PWRTE = OFF, PWRT disabled
   519                           ;	Brown-out Reset Enable bit
   520                           ;	BOREN = OFF, BOR disabled
   521                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   522                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   523                           ;	Data EEPROM Memory Code Protection bit
   524                           ;	CPD = OFF, Data EEPROM code protection off
   525                           ;	Flash Program Memory Write Enable bits
   526                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   527                           ;	In-Circuit Debugger Mode bit
   528                           ;	DEBUG = 0x1, unprogrammed default
   529                           ;	Flash Program Memory Code Protection bit
   530                           ;	CP = OFF, Code protection off
   531  2007                     	org	8199
   532  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_manager in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interrupt_manager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_manager in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_manager in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_manager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      30
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _interrupt_manager                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _interrupt_manager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       8      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Mar 01 11:28:04 2021

                        l24 005A                          u10 003B                          u11 003A  
                        u20 0057                          u21 0056                          u67 0025  
                        u77 0044                         l703 0062                         l631 0014  
                       l641 002C                         l633 001A                         l651 0052  
                       l643 0032                         l635 001B                         l653 0057  
                       l645 003B                         l637 001C                         l647 003E  
                       l639 001F                         l649 004B                         l657 005A  
                      _INTF 0059                        i1l39 007E                        u3_20 0072  
                      u3_21 0071                        u4_20 0078                        u4_21 0076  
                      u5_20 0079                        _main 0014                        btemp 007E  
                      start 000C                       ?_main 0070                       i1l671 007D  
                     i1l665 006D                       i1l667 0072                       i1l669 007C  
                     _PORTD 0008                       _TRISB 0086                       _TRISD 0088  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __initialization 000F                __end_of_main 006D                      ??_main 0073  
                    _INTCON 000B                      saved_w 007E            main@bit_position 0076  
   __end_of__initialization 0010              __pcstackCOMMON 0070                  __pmaintext 0014  
                __pintentry 0004                     __ptext1 006D        end_of_initialization 0010  
       start_initialization 000F                 __pbssCOMMON 0077                   ___latbits 0002  
                 _direction 0077           _interrupt_manager 006D          ?_interrupt_manager 0070  
       ??_interrupt_manager 0070           interrupt_function 0004   __end_of_interrupt_manager 0085  
             __size_of_main 0059  __size_of_interrupt_manager 0018                  _INTCONbits 000B  
                  intlevel1 0000                  _OPTION_REG 0081  
